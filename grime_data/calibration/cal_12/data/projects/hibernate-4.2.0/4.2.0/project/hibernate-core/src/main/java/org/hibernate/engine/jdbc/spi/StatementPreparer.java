/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.hibernate.engine.jdbc.spi;

import java.sql.PreparedStatement;
import java.sql.Statement;

import org.hibernate.ScrollMode;

/**
 * Contracting for preparing SQL statements
 *
 * @author Steve Ebersole
 * @author Brett Meyer
 */
public interface StatementPreparer {
	/**
	 * Create a statement.
	 *
	 * @param sql The SQL the statement to be created
	 *
	 * @return the statement
	 */
	public Statement createStatement();
	
	/**
	 * Prepare a statement.
	 *
	 * @param sql The SQL the statement to be prepared
	 *
	 * @return the prepared statement
	 */
	public PreparedStatement prepareStatement(String sql);

	/**
	 * Prepare a statement.
	 *
	 * @param sql The SQL the statement to be prepared
	 * @param isCallable Whether to prepare as a callable statement.
	 *
	 * @return the prepared statement
	 */
	public PreparedStatement prepareStatement(String sql, boolean isCallable);

	/**
	 * Get a prepared statement to use for inserting using JDBC3
	 * {@link java.sql.PreparedStatement#getGeneratedKeys getGeneratedKeys} processing.
	 *
	 * @param sql - the SQL for the statement to be prepared
	 * @param autoGeneratedKeys - a flag indicating whether auto-generated keys should be returned; one of<ul>
	 *     <li>{@link PreparedStatement#RETURN_GENERATED_KEYS}</li>
	 *     <li>{@link PreparedStatement#NO_GENERATED_KEYS}</li>
	 *     </li>
	 *
	 * @return the prepared statement
	 *
	 * @see java.sql.Connection#prepareStatement(String, int)
	 */
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys);


	/**
	 * Get a prepared statement to use for inserting using JDBC3
	 * {@link java.sql.PreparedStatement#getGeneratedKeys getGeneratedKeys} processing.
	 *
	 * @param sql - the SQL for the statement to be prepared
	 * @param columnNames The name of the columns to be returned in the generated keys result set.
	 *
	 * @return the prepared statement
	 *
	 * @see java.sql.Connection#prepareStatement(String, String[])
	 */
	public PreparedStatement prepareStatement(String sql, String[] columnNames);

	/**
	 * Get a prepared statement for use in loading / querying.
	 *
	 * @param sql The SQL the statement to be prepared
	 * @param isCallable Whether to prepare as a callable statement.
	 * @param scrollMode (optional) scroll mode to be applied to the resulting result set; may be null to indicate
	 * no scrolling should be applied.
	 *
	 * @return the prepared statement
	 */
	public PreparedStatement prepareQueryStatement(String sql, boolean isCallable, ScrollMode scrollMode);
}
