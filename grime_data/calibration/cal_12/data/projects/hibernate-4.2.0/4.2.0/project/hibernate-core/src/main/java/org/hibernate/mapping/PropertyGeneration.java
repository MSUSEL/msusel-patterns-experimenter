/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.hibernate.mapping;
import java.io.Serializable;

/**
 * Indicates whether given properties are generated by the database and, if
 * so, at what time(s) they are generated.
 *
 * @author Steve Ebersole
 */
public class PropertyGeneration implements Serializable {

	/**
	 * Values for this property are never generated by the database.
	 */
	public static final PropertyGeneration NEVER = new PropertyGeneration( "never" );
	/**
	 * Values for this property are generated by the database on insert.
	 */
	public static final PropertyGeneration INSERT = new PropertyGeneration( "insert" );
	/**
	 * Values for this property are generated by the database on both insert and update.
	 */
	public static final PropertyGeneration ALWAYS = new PropertyGeneration( "always" );

	private final String name;

	private PropertyGeneration(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public static PropertyGeneration parse(String name) {
		if ( "insert".equalsIgnoreCase( name ) ) {
			return INSERT;
		}
		else if ( "always".equalsIgnoreCase( name ) ) {
			return ALWAYS;
		}
		else {
			return NEVER;
		}
	}

	private Object readResolve() {
		return parse( name );
	}
	
	public String toString() {
		return getClass().getName() + "(" + getName() + ")";
	}
}
