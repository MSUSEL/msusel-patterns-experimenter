<?xml version="1.0"?>
<!--

    The MIT License (MIT)

    MSUSEL Arc Framework
    Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
    Software Engineering Laboratory and Idaho State University, Informatics and
    Computer Science, Empirical Software Engineering Laboratory

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

-->
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!-- 

  This mapping demonstrates 

     (1) use of a class-to-subselect mapping, that allows data
         defined in other classes to be exposed as a read-only
         entity (you would do this if you really wanted a view,
         but didn't or couldn't define one for some reason)
         This is a "derived entity" mapping.
     
     (2) use of <synchronize/> to ensure that auto-flush happens
         correctly, and that queries against the derived entity
         do not return stale data
     
-->

<hibernate-mapping 
	package="org.hibernate.test.subselect"
	default-access="field">
	
	<class name="Human" table="humans">
		
		<id name="id" unsaved-value="0" 
		        column="bid">
			<generator class="hilo"/>
		</id>
		
		<property name="name" 
			not-null="true"/>
		<property name="sex" 
			not-null="true" 
			update="false"/>
		<property name="address"/>
		<property name="heightInches">
			<column name="height_centimeters" 
				not-null="true" 
				read="height_centimeters / 2.54E0"
				write="? * 2.54E0"/>
		</property>		
		
	</class>
	
	<class name="Alien" table="aliens">
		
		<id name="id" unsaved-value="0" 
		        column="bid">
			<generator class="hilo"/>
		</id>
		
		<property name="identity" 
			not-null="true"
			column="ident"/>
		<property name="planet"/>
		<property name="species" 
			not-null="true" 
			update="false"/>
		<property name="heightInches">
			<column name="height_centimeters" 
				not-null="true" 
				read="height_centimeters / 2.54E0"
				write="? * 2.54E0"/>
		</property>			
			
	</class>
	
	<class name="Being" mutable="false">
	
		<subselect>
			select bid, name as ident, address as loc, 'human' as species, height_centimeters
			from humans 
			union 
			select bid, ident, planet as loc, species, height_centimeters
			from aliens
		</subselect>
		
		<synchronize table="humans"/>
		<synchronize table="aliens"/>
		
		<id name="id" unsaved-value="0" 
		        column="bid">
			<generator class="native"/>
		</id>
		
		<property name="identity" column="ident"/>
		<property name="location" column="loc"/>
		<property name="species"/>
		<property name="heightInches">
			<column name="height_centimeters" 
				not-null="true" 
				read="height_centimeters / 2.54E0"/>
		</property>		
		
	</class>

</hibernate-mapping>
