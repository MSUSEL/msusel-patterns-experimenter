====
    The MIT License (MIT)

    MSUSEL Arc Framework
    Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
    Software Engineering Laboratory and Idaho State University, Informatics and
    Computer Science, Empirical Software Engineering Laboratory

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
====

--  Testing some advanced trigger functionality

CREATE TABLE log_table (
    stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    message VARCHAR(80) NOT NULL,
 )
CREATE PROCEDURE record(msg VARCHAR(60))
    MODIFIES SQL DATA
    BEGIN ATOMIC
        INSERT INTO log_table(message) VALUES (msg);
    END
CREATE TABLE base_table (
    id BIGINT generated ALWAYS AS IDENTITY PRIMARY KEY,
    i INTEGER NOT NULL,
    vc VARCHAR(600) NOT NULL,
 )

/*r0*/ SELECT COUNT(*) FROM log_table

CALL record('test record')

/*r1*/ SELECT COUNT(*) FROM log_table

CREATE TRIGGER manual_log_trigger AFTER INSERT ON base_table
    INSERT INTO log_table(message) VALUES ('totally manual trigger event')

INSERT INTO base_table(i, vc) VALUES(1, 'one')

/*r2*/ SELECT COUNT(*) FROM log_table

CREATE TRIGGER call_log_trigger AFTER INSERT ON base_table
    CALL record('trigger routine CALL event')

INSERT INTO base_table(i, vc) VALUES(2, 'two')

/*r4*/ SELECT COUNT(*) FROM log_table
/*r2*/ SELECT COUNT(*) FROM base_table

-- this trigger is called recursively -- WHEN clause avoids infinite recursion
CREATE TRIGGER extra_ins_trigger_ AFTER INSERT ON base_table
    REFERENCING NEW as new_row
    FOR EACH ROW
    WHEN (MOD(new_row.i,2) = 1)
        INSERT INTO base_table(i, vc)
        VALUES(1 + new_row.i, 'TRIG_ADDITION' || new_row.vc)

-- Sanity check to verify that the Trigger creaion didn't change anything
/*r4*/ SELECT COUNT(*) FROM log_table
/*r2*/ SELECT COUNT(*) FROM base_table

INSERT INTO base_table(i, vc) VALUES(3, 'x')
-- Should write 2 base_table entries, hence 4 log records
/*r8*/ SELECT COUNT(*) FROM log_table
/*r4*/ SELECT COUNT(*) FROM base_table
