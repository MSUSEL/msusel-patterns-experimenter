/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

public class TestJDBCGeneratedColumns extends TestBase {

    public TestJDBCGeneratedColumns(String name) {
        super(name);
    }

    public void testQuery() {

        boolean successPrepared = false;
        boolean successDirect   = false;

        try {
            Connection c  = newConnection();
            Statement  st = c.createStatement();
            String     s  = "DROP TABLE T IF EXISTS";

            st.execute(s);

            s = "CREATE TABLE T (I INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33), C CHARACTER(10))";

            st.execute(s);

            s = "INSERT INTO T (C) VALUES('TEST')";

            st.execute(s, Statement.RETURN_GENERATED_KEYS);

            ResultSet rs = st.getGeneratedKeys();

            while (rs.next()) {
                System.out.println("generated: " + rs.getInt(1));

                successDirect = rs.getInt(1) == 33;
            }

            PreparedStatement ps = c.prepareStatement(s,
                Statement.RETURN_GENERATED_KEYS);

            ps.execute();

            rs = ps.getGeneratedKeys();

            while (rs.next()) {
                System.out.println("" + rs.getInt(1));

                successPrepared = rs.getInt(1) == 34;
            }

            ps.close();

            ps = c.prepareStatement(s, new int[]{ 1 });

            ps.execute();

            rs = ps.getGeneratedKeys();

            while (rs.next()) {
                System.out.println("" + rs.getInt(1));

                successPrepared &= rs.getInt(1) == 35;
            }

            ps.close();

            ps = c.prepareStatement(s, new String[]{ "I" });

            ps.execute();

            rs = ps.getGeneratedKeys();

            while (rs.next()) {
                System.out.println("" + rs.getInt(1));

                successPrepared &= rs.getInt(1) == 36;
                successPrepared &= rs.getBigDecimal(1).intValue() == 36;
            }

            ps.close();
        } catch (Exception e) {
            System.out.print(e);
        }

        assertTrue(successPrepared);
        assertTrue(successDirect);
    }
}
