/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.hsqldb.jdbc;

import java.sql.SQLException;
import java.sql.Savepoint;

/* $Id: JDBCSavepoint.java 3481 2010-02-26 18:05:06Z fredt $ */

// Revision 1.10  2006/07/12 12:38:22  boucherb
// - full synch up to Mustang b90

/**
 * The representation of a savepoint, which is a point within
 * the current transaction that can be referenced from the
 * <code>Connection.rollback</code> method. When a transaction
 * is rolled back to a savepoint all changes made after that
 * savepoint are undone.
 * <p>
 * Savepoints can be either named or unnamed. Unnamed savepoints
 * are identified by an ID generated by the underlying data source.
 *
 * <!-- start Release-specific documentation -->
 * <div class="ReleaseSpecificDocumentation">
 * <h3>HSQLDB-Specific Information:</h3> <p>
 *
 * SQL 2003 standard does not support unnamed savepoints. However, this
 * feature is supported from version 2.0.<p>
 *
 * If the connection is autoCommit, setting savepoints has no effect as any
 * such savepoint is cleared upon the execution of the first transactional
 * statement. <p>
 *
 * </div>
 * <!-- end release-specific documentation -->
 *
 *
 * @author boucherb@users
 * @since JDK 1.4, HSQLDB 1.7.2
 */
public class JDBCSavepoint implements Savepoint {

    int            id;
    String         name;
    JDBCConnection connection;

    JDBCSavepoint(String name, JDBCConnection conn) throws SQLException {

        if (name == null) {
            throw Util.nullArgument("name");
        }

        if (conn == null) {
            throw Util.nullArgument("conn");
        }
        this.name       = name;
        this.connection = conn;
    }

    JDBCSavepoint(JDBCConnection conn) throws SQLException {

        if (conn == null) {
            throw Util.nullArgument("conn");
        }
        this.id         = conn.getSavepointID();
        this.connection = conn;
    }

    /**
     * Retrieves the generated ID for the savepoint that this
     * <code>Savepoint</code> object represents.
     * @return the numeric ID of this savepoint
     * @exception SQLException if this is a named savepoint
     * @since 1.4
     */
    public int getSavepointId() throws SQLException {

        if (name == null) {
            return id;
        }

        throw Util.notSupported();
    }

    /**
     * Retrieves the name of the savepoint that this <code>Savepoint</code>
     * object represents.
     *
     * @return the name of this savepoint
     * @exception SQLException if this is an un-named savepoint
     * @since 1.4
     */
    public String getSavepointName() throws SQLException {

        if (name == null) {
            throw Util.notSupported();
        }

        return name;
    }

    public String toString() {
        return super.toString() + "[name=" + name + "]";
    }
}
