/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.jaspersoft.ireport.designer.welcome;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.ImageIcon;
import org.jfree.text.G2TextMeasurer;

/**
 *
 * @author gtoffoli
 */
public class GraySeparator extends javax.swing.JPanel {

    public static final int SEPARATOR_NORTH = 0;
    public static final int SEPARATOR_SOUTH = 1;
    public static final int SEPARATOR_EAST = 2;
    public static final int SEPARATOR_WEST = 3;


    private int separatorType = 0;
    private boolean paintStar = false;

    ImageIcon imageIcon = new ImageIcon(G2TextMeasurer.class.getResource("/com/jaspersoft/ireport/designer/welcome/cross.png"));
    /** Creates new form GraySeparator */
    public GraySeparator() {
        this(0,false);
    }
    
    public GraySeparator(int type) {
        this(type,false);
    }

    public GraySeparator(int type, boolean paintStar) {
        initComponents();
        this.separatorType = type;
        this.paintStar = paintStar;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {

        Color origColor = g.getColor();

        g.setColor(Color.WHITE);
        g.fillRect(0,0,getWidth(), getHeight());

        g.setColor(new Color(222,222,222));

        if (getSeparatorType() == SEPARATOR_NORTH)
        {
            int top = 25;
            g.drawLine(13, top, 13, getHeight());

            if (isPaintStar() && imageIcon != null)
            {
                g.drawImage(imageIcon.getImage(), 0, getHeight()-27, this);
            }
        }
        else if (getSeparatorType() == SEPARATOR_SOUTH)
        {
            int bottom = getHeight()-25;
            g.drawLine(13, 0, 13, bottom);

            if (isPaintStar() && imageIcon != null)
            {
                g.drawImage(imageIcon.getImage(), 0, 0, this);
            }
        }
        if (getSeparatorType() == SEPARATOR_WEST)
        {
            int left = 25;
            g.drawLine(left, 13, getWidth(), 13);

            if (isPaintStar() && imageIcon != null)
            {
                g.drawImage(imageIcon.getImage(), getWidth()-27, 0, this);
            }
        }
        else if (getSeparatorType() == SEPARATOR_EAST)
        {
            int right = getWidth()-25;
            g.drawLine(0, 13, right, 13);

            if (isPaintStar() && imageIcon != null)
            {
                g.drawImage(imageIcon.getImage(), 0, 0, this);
            }
        }
    }

    /**
     * @return the separatorType
     */
    public int getSeparatorType() {
        return separatorType;
    }

    /**
     * @param separatorType the separatorType to set
     */
    public void setSeparatorType(int separatorType) {
        this.separatorType = separatorType;
    }

    /**
     * @return the paintStar
     */
    public boolean isPaintStar() {
        return paintStar;
    }

    /**
     * @param paintStar the paintStar to set
     */
    public void setPaintStar(boolean paintStar) {
        this.paintStar = paintStar;
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
