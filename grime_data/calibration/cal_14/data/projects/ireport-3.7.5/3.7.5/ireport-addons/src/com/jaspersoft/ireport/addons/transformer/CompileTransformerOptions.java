/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BarcodeTransformerOptions.java
 *
 * Created on 31-mag-2010, 18.54.20
 */

package com.jaspersoft.ireport.addons.transformer;

/**
 *
 * @author gtoffoli
 */
public class CompileTransformerOptions extends javax.swing.JPanel {

    /** Creates new form BarcodeTransformerOptions */
    public CompileTransformerOptions() {
        initComponents();
    }

    public boolean isBackupJasper()
    {
        return jCheckBoxBackup.isSelected();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jCheckBoxBackup = new javax.swing.JCheckBox();
        jCheckBoxUseOptionsDir = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(CompileTransformerOptions.class, "CompileTransformerOptions.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(jLabel1, gridBagConstraints);

        jCheckBoxBackup.setSelected(true);
        jCheckBoxBackup.setText(org.openide.util.NbBundle.getMessage(CompileTransformerOptions.class, "CompileTransformerOptions.jCheckBoxBackup.text")); // NOI18N
        jCheckBoxBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBackupActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jCheckBoxBackup, gridBagConstraints);

        jCheckBoxUseOptionsDir.setText(org.openide.util.NbBundle.getMessage(CompileTransformerOptions.class, "CompileTransformerOptions.jCheckBoxUseOptionsDir.text")); // NOI18N
        jCheckBoxUseOptionsDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseOptionsDirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jCheckBoxUseOptionsDir, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBackupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxBackupActionPerformed

    private void jCheckBoxUseOptionsDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseOptionsDirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxUseOptionsDirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxBackup;
    private javax.swing.JCheckBox jCheckBoxUseOptionsDir;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables


    public boolean isDefaultDirectory()
    {
        return jCheckBoxUseOptionsDir.isSelected();
    }

}
