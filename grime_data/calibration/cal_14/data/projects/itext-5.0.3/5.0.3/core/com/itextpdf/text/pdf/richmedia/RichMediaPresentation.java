/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.itextpdf.text.pdf.richmedia;

import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;

/**
 * The RichMediaPresentation dictionary contains information about how the
 * annotation and user interface elements are to be visually laid out and
 * drawn.
 * See ExtensionLevel 3 p82
 * @since	5.0.0
 */
public class RichMediaPresentation extends PdfDictionary {
	
	/**
	 * Creates a RichMediaPresentation dictionary.
	 */
	public RichMediaPresentation() {
		super(PdfName.RICHMEDIAPRESENTATION);
	}
	
	/**
	 * Sets the style for the presentation;
	 * can be embedded or windowed.
	 * @param	style PdfName.EMBEDDED or PdfName.WINDOWED
	 */
	public void setStyle(PdfName style) {
		put(PdfName.STYLE, style);
	}
	
	/**
	 * A RichMediaWindow Dictionary that describes the size and
	 * position of the floating user interface window when the
	 * value for Style is set to Windowed.
	 * @param	window	a RichMediaWindow object
	 */
	public void setWindow(RichMediaWindow window) {
		put(PdfName.WINDOW, window);
	}
	
	/**
	 * Set a flag that indicates whether the page content is displayed
	 * through the transparent areas of the rich media content (where
	 * the alpha value is less than 1.0). If true, the rich media artwork
	 * is composited over the page content using an alpha channel. If false,
	 * the rich media artwork is drawn over an opaque background prior to
	 * composition over the page content.
	 * @param	transparent	a boolean
	 */
	public void setTransparent(PdfBoolean transparent) {
		put(PdfName.TRANSPARENT, transparent);
	}
	
	/**
	 * Sets a flag that indicates the default behavior of the navigation pane
	 * user interface element. If true, the navigation pane is visible when
	 * the content is initially activated. If false, the navigation pane is
	 * not displayed by default.
	 * @param	navigationPane	a boolean
	 */
	public void setNavigationPane(PdfBoolean navigationPane) {
		put(PdfName.NAVIGATIONPANE, navigationPane);
	}

	/**
	 * Sets a flag that indicates the default behavior of an interactive
	 * toolbar associated with this annotation. If true, a toolbar is
	 * displayed when the annotation is activated and given focus. If false,
	 * a toolbar is not displayed by default.
	 * @param	toolbar	a boolean
	 */
	public void setToolbar(PdfBoolean toolbar) {
		put(PdfName.TOOLBAR, toolbar);
	}

	/**
	 * Sets a flag that indicates whether a context click on the rich media
	 * annotation is passed to the media player run time or is handled by
	 * the conforming reader. If false, the conforming reader handles the
	 * context click. If true, the conforming reader's context menu is not
	 * visible, and the user sees the context menu and any custom items
	 * generated by the media player run time.
	 * @param	passContextClick	a boolean
	 */
	public void setPassContextClick(PdfBoolean passContextClick) {
		put(PdfName.PASSCONTEXTCLICK, passContextClick);
	}
}
