<?xml version="1.0" encoding="UTF-8"?>
<!--

    The MIT License (MIT)

    MSUSEL Arc Framework
    Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
    Software Engineering Laboratory and Idaho State University, Informatics and
    Computer Science, Empirical Software Engineering Laboratory

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Graph Tutorial 1</title>

  <para>The GeoTools project strives to support as many geographical data
  formats and opperations as possible.</para>

  <para>The geotools2 graph package defines the concept of a graph (or
  network) made up of geotools2 Features. The graph module strives to provide
  a convient flexable and performant API for graph construction and query.</para>

  <para>In additional to generic Graph support, Networks based on LineStrings
  and Directed Networks have been implementations.</para>

  <sect1>
    <title>Graphing Terms</title>

    <para>The Graph module makes use of concepts and (classes) from the
    geotools2 core:<itemizedlist><listitem><para>Feature - atomic unit of
    geographic information</para></listitem><listitem><para>FeatureType -
    keeps track of what attributes each Feature can hold</para></listitem><listitem><para>FeatureID
    - a unique id associated with each Feature (must start with a non-numeric
    character)</para></listitem></itemizedlist>In addition to the Feature API
    from core, the graph module makes use of relationships. Usually
    relationships are based on spatial comparisions between features.</para>

    <para>Example Relationships</para>

    <itemizedlist>
      <listitem>
        <para>Graph constructed from LineStrings based on &#34;shared end
        points&#34;</para>
      </listitem>

      <listitem>
        <para>Graph constructed from Polygons based on &#34;touches&#34;</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Creating and using a Graph</title>

    <para>Graph creations is handled using a Graph Builder. For those
    familliar with the Builder Pattern (GOF Design Patterns) this will look
    familliar.</para>

    <para>Example of building a Line network:<programlisting>LineGraphBuilder lgb = new LineGraphBuilder();
FeatureSource fs = (FeatureSource)layers.get(typeName);
FeatureResults fr = fs.getFeatures();
FeatureCollection fc = fr.collection();
FeatureIterator f = fc.features();
while(f.hasNext()){
  Feature ft = f.next();
  if(envelope.contains(ft.getBounds()))
    lgb.add(ft);
}
// lgb is loaded
Graph g = lgb.build();
</programlisting></para>

    <para>To make use of your graph we will use a GraphVisitor (this is the
    usual GOF Visitor pattern):</para>

    <para>Example of making use of the network:<programlisting>class OrphanVisitor implements GraphVisitor{
  private int count = 0;
  public int getCount(){return count;}
  public int visit(GraphComponent element){
    if(element.getAdjacentElements().size()==0)
      count++;
    results.error(element.getFeature(),&#34;Orphaned&#34;);
    return GraphTraversal.CONTINUE;
  }
}
OrphanVisitor ov = new OrphanVisitor();
SimpleGraphWalker sgv = new SimpleGraphWalker(ov);
BasicGraphTraversal bgt = new BasicGraphTraversal(g,sgv);
bgt.walkNodes();
if(ov.getCount()==0)
  return true;
else
  return false;</programlisting></para>
  </sect1>
</article>