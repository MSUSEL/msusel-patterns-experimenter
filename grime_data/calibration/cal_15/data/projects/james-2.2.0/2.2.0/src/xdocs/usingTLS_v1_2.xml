<?xml version="1.0"?>
<!--

    The MIT License (MIT)

    MSUSEL Arc Framework
    Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
    Software Engineering Laboratory and Idaho State University, Informatics and
    Computer Science, Empirical Software Engineering Laboratory

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

-->

<document>

 <properties>
  <title>Using TLS</title>
  <author email="charles@benett1.demon.co.uk">Charles Benett</author>
 </properties>

<body>

<section name="James 1.2.1 - Using TLS">

  <p>
    This document explains how to enable JAMES 1.2.1 to use Transport Layer
    Security (TLS) (ie SSL).
  </p>
</section>

<section name="Obtain JSSE">

  <p>
    Obtain JSSE source from java.sun.com. Follow their installation directions.
    We assume that you install JSSE as a standard extension, with a static
    provider definition. (See notes with JSSE distribution)
  </p>
  <p>
    Note that the US export restrictions still apply to JSSE
    (at version 1.0.2), so while both the international and domestic versions
    offer the same level of crypto, the international version does not take
    alternative providers.
  </p>

</section>

<section name="Enable TLS">

  <p>
    Using JAMES with TLS. You need to do three things over and above the
    normal operation of James: 
    <ul>
      <li>In Avalon.conf.xml, uncomment the TLS listener defintion.</li>
      <li>In JAMES.conf.xml, uncomment the &lt;useTLS&gt;TRUE&lt;/useTLS&gt; element
        for the service you want to use TLS. It is currently available for
        remote manager and POP3. (If using POP3 over TLS, it is probably best
        to change port to 995, which is the IANA designated POP3S port).</li>
      <li> Ensure that avalonTestKeys is in the conf directory. You may need
        to manually extract this from the Avalon.jar (with: jar xvf Avalon.jar
        conf/avalonTestKeys). Note that this is a self-signed certificate for
        test purposes only. You can specify a different server certificate in
        the Avalon.conf.xml file.</li>
    </ul>
  </p>
  <p>
    Start James
  </p>
</section>

<section name="Verify TLS-enabled JAMES">
  <p>
    (Positive Test) Use an SSL client to open a socket to the appropriate port.
    I used openssl from www.openssl.org to test this.
    E.g. openssl s_client -connect localhost:4555. You should see the normal
    remote manager or POP3 server greeting and have normal  operation. 
    <br>
      - If, using openssl s_client, you get a connection refused/ error no
      111, just try again. This probably means you got to the port before it
      was ready.
    </br>
 </p>
  <p>
   (Negative Test) telnet to port 4555 (ie without SSL). This should hang the
   telnet client. It should also lock port 4555 until the connection times out,
   I think.
  </p>
</section>

</body>
</document>
