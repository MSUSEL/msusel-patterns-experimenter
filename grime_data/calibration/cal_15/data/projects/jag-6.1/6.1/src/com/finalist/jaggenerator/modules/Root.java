/**
 * The MIT License (MIT)
 *
 * MSUSEL Arc Framework
 * Copyright (c) 2015-2019 Montana State University, Gianforte School of Computing,
 * Software Engineering Laboratory and Idaho State University, Informatics and
 * Computer Science, Empirical Software Engineering Laboratory
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.finalist.jaggenerator.modules;

import com.finalist.jaggenerator.modules.JagBean;

import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.xml.parsers.*;

import org.w3c.dom.*;

/**
 *
 * @author  hillie
 */
public class Root extends DefaultMutableTreeNode implements JagBean {
   /** Creates new form BeanForm */

   public Config config = null;
   public App app = null;
   public Paths paths = null;
   public Datasource datasource = null;


   public Root() {
      initComponents();
      add(config = new Config());
      add(app = new App());
      add(paths = new Paths());
      add(datasource = new Datasource());
   }


   public Root(Document doc) {
      NodeList nl = doc.getElementsByTagName("config");
      add(config = new Config((Element) nl.item(0)));
      nl = doc.getElementsByTagName("module");
      for (int i = 0; i < nl.getLength(); i++) {
         Element el = (Element) nl.item(i);
         String name = el.getAttribute("name");
         if (name.equals("app")) {
            app = new App(el);
            add(app);
            this.setRootPackage(app.getRootPackage());
         }
         if (name.equals("paths")) add(paths = new Paths(el));
         if (name.equals("datasource")) add(datasource = new Datasource(el));
         if (name.equals("session")) add(new Session(el));
         if (name.equals("entity")) add(new Entity(el));
      }
   }


   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    private void initComponents() {//GEN-BEGIN:initComponents
        panel = new javax.swing.JPanel();

        panel.setLayout(null);

    }//GEN-END:initComponents


   public String toString() {
      return "JAG Application";
   }


   public JPanel getPanel() {
      return new JPanel();
   }


   public void getXML(Element el) throws ParserConfigurationException {
      Enumeration children = children();
      while (children.hasMoreElements()) {
         JagBean child = (JagBean) children.nextElement();
         child.getXML(el);
      }
   }


   /** Getter for property rootPackage.
    * @return Value of property rootPackage.
    *
    */
   public String getRootPackage() {
      return app.getRootPackage();
   }


   /** Setter for property rootPackage.
    * @param rootPackage New value of property rootPackage.
    *
    */
   public void setRootPackage(String rootPackage) {

      app.rootPackageText.setText(rootPackage);
   }


   public String getRefName() {
      return null;
   }

   /** return all Session EJBs. */
   public ArrayList getSessionEjbs() {
      ArrayList refs = new ArrayList();
      for (int i = 0; i < getChildCount(); i++) {
         JagBean child = (JagBean) getChildAt(i);
         if (child instanceof Session) {
            refs.add(child);
         }
      }
      return refs;
   }

   /** return all Session EJBs. */
   public void setSessionEjbs(ArrayList sessions) {
      for (int i = 0; i < sessions.size(); i++) {
         Session child = (Session) sessions.get(i);
         add(child);
      }
   }



   /** return all Entity EJBs. */
   public ArrayList getEntityEjbs() {
      ArrayList refs = new ArrayList();
      for (int i = 0; i < getChildCount(); i++) {
         JagBean child = (JagBean) getChildAt(i);
         if (child instanceof Entity) {
            refs.add(child);
         }
      }
      return refs;
   }

   /** return all Session EJBs. */
   public void setEntityEjbs(ArrayList entities) {
      for (int i = 0; i < entities.size(); i++) {
         Entity child = (Entity) entities.get(i);
         add(child);
      }
   }


   public ArrayList getRefs() {
      ArrayList refs = new ArrayList();
      for (int i = 0; i < getChildCount(); i++) {
         JagBean child = (JagBean) getChildAt(i);

         if (child instanceof Entity) {
         String childRef = child.getRefName();

            if (childRef != null) {
          //      if (child.toString().indexOf("Entity -") != -1)
                  refs.add(childRef);
            }
         }
      }
      return refs;
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

}